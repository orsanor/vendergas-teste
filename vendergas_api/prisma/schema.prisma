generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean?
  image         String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  companies Company[]
  sessions  Session[]
  accounts  Account[]

  @@map("user")
}

model Company {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  tradeName String
  legalName String
  cnpj      String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id])

  clients  Client[]
  products Product[]
  orders   Order[]
}

model Client {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String
  phone String

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  orders Order[]
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  description String

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  orderProducts OrderProduct[]
}

model Order {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  number String   @unique
  notes  String?
  date   DateTime @default(now())

  clientId String @db.ObjectId
  client   Client @relation(fields: [clientId], references: [id])

  companyId String  @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id])

  orderProducts OrderProduct[]
}

model OrderProduct {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}
